"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/data-validation.ts":
/*!********************************!*\
  !*** ./lib/data-validation.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCumulativeFeesAtVolume: function() { return /* binding */ getCumulativeFeesAtVolume; },\n/* harmony export */   getFeeAtVolume: function() { return /* binding */ getFeeAtVolume; },\n/* harmony export */   normalizeToDayBasis: function() { return /* binding */ normalizeToDayBasis; },\n/* harmony export */   testCumulativeFeeCalculation: function() { return /* binding */ testCumulativeFeeCalculation; },\n/* harmony export */   validateDataset: function() { return /* binding */ validateDataset; }\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/v4/classic/schemas.js\");\n\nconst FeePointSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0),\n    fee: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nconst ExchangeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    exchange: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n    type: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"CEX\",\n        \"DEX\",\n        \"Nado\"\n    ]),\n    product: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"perp\",\n        \"spot\"\n    ]),\n    day_basis: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().positive(),\n    maker_fees: zod__WEBPACK_IMPORTED_MODULE_0__.array(FeePointSchema).min(1),\n    taker_fees: zod__WEBPACK_IMPORTED_MODULE_0__.array(FeePointSchema).min(1)\n});\nconst DatasetSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    exchanges: zod__WEBPACK_IMPORTED_MODULE_0__.array(ExchangeSchema).min(1)\n});\nfunction validateDataset(data) {\n    try {\n        return DatasetSchema.parse(data);\n    } catch (error) {\n        console.error(\"Dataset validation failed:\", error);\n        throw new Error(\"Invalid dataset format\");\n    }\n}\nfunction normalizeToDayBasis(exchange, targetDayBasis) {\n    if (exchange.day_basis === targetDayBasis) {\n        return exchange;\n    }\n    // Use simple, clean multipliers for better user understanding\n    let multiplier;\n    if (exchange.day_basis === 7 && targetDayBasis === 14) {\n        multiplier = 2; // 7-day → 14-day: multiply by 2\n    } else if (exchange.day_basis === 7 && targetDayBasis === 30) {\n        multiplier = 4; // 7-day → 30-day: multiply by 4\n    } else if (exchange.day_basis === 14 && targetDayBasis === 7) {\n        multiplier = 0.5; // 14-day → 7-day: divide by 2\n    } else if (exchange.day_basis === 14 && targetDayBasis === 30) {\n        multiplier = 2; // 14-day → 30-day: multiply by 2\n    } else if (exchange.day_basis === 30 && targetDayBasis === 7) {\n        multiplier = 0.25; // 30-day → 7-day: divide by 4\n    } else if (exchange.day_basis === 30 && targetDayBasis === 14) {\n        multiplier = 0.5; // 30-day → 14-day: divide by 2\n    } else {\n        // Fallback to original calculation (shouldn't happen with our current day_basis values)\n        multiplier = targetDayBasis / exchange.day_basis;\n    }\n    return {\n        ...exchange,\n        day_basis: targetDayBasis,\n        maker_fees: exchange.maker_fees.map((point)=>({\n                ...point,\n                volume: point.volume * multiplier\n            })),\n        taker_fees: exchange.taker_fees.map((point)=>({\n                ...point,\n                volume: point.volume * multiplier\n            }))\n    };\n}\nfunction getFeeAtVolume(feeSchedule, volume) {\n    var _feeSchedule_;\n    var _feeSchedule__fee;\n    // Find the last fee point where volume <= target volume\n    // This returns the fee for the tier that STARTS at this volume\n    let applicableFee = (_feeSchedule__fee = (_feeSchedule_ = feeSchedule[0]) === null || _feeSchedule_ === void 0 ? void 0 : _feeSchedule_.fee) !== null && _feeSchedule__fee !== void 0 ? _feeSchedule__fee : 0;\n    for (const point of feeSchedule){\n        if (volume >= point.volume) {\n            applicableFee = point.fee;\n        } else {\n            break;\n        }\n    }\n    return applicableFee;\n}\nfunction getCumulativeFeesAtVolume(feeSchedule, volume) {\n    if (volume <= 0) return 0;\n    console.log(\"\\n\\uD83E\\uDDEE Cumulative Fee Calculation Debug:\");\n    console.log(\"Input volume: \".concat(volume, \" (type: \").concat(typeof volume, \")\"));\n    console.log(\"Fee schedule:\", feeSchedule);\n    let totalFees = 0;\n    // Calculate fees for each tier up to the target volume\n    // This represents the total fees paid to reach the specified volume threshold\n    for(let i = 0; i < feeSchedule.length; i++){\n        const currentPoint = feeSchedule[i];\n        const nextPoint = feeSchedule[i + 1];\n        console.log(\"\\nProcessing tier \".concat(i, \":\"), currentPoint);\n        // If we haven't reached this tier yet, skip\n        if (volume < currentPoint.volume) {\n            console.log(\"Skipping tier \".concat(i, \" - volume \").concat(volume, \" < \").concat(currentPoint.volume));\n            continue;\n        }\n        // Calculate the volume range for this tier\n        const tierStartVolume = currentPoint.volume;\n        const tierEndVolume = nextPoint ? Math.min(volume, nextPoint.volume) : volume;\n        console.log(\"Tier range: \".concat(tierStartVolume, \" to \").concat(tierEndVolume));\n        if (tierEndVolume > tierStartVolume) {\n            // Calculate volume in this tier (convert from millions to actual volume)\n            // Note: Volume in dataset is stored in millions (e.g., 5 = $5M)\n            const tierVolume = (tierEndVolume - tierStartVolume) * 1000000; // Convert from millions to actual volume\n            // Calculate fees for this tier (fees are in basis points, so divide by 10000)\n            // Example: 1.5 bps = 0.015% = 0.00015\n            const feeRate = currentPoint.fee / 10000;\n            const tierFees = tierVolume * feeRate;\n            totalFees += tierFees;\n            console.log(\"Tier \".concat(i, \" calculation:\"));\n            console.log(\"  Volume range: \".concat(tierStartVolume, \" to \").concat(tierEndVolume));\n            console.log(\"  Raw volume: \".concat(tierEndVolume - tierStartVolume));\n            console.log(\"  Converted to actual: \".concat(tierVolume.toLocaleString()));\n            console.log(\"  Fee rate: \".concat(currentPoint.fee, \" bps = \").concat(feeRate));\n            console.log(\"  Tier fees: $\".concat(tierFees.toFixed(2)));\n        }\n    }\n    console.log(\"\\n\\uD83D\\uDCB0 Total cumulative fees: $\".concat(totalFees.toFixed(2)));\n    // Special debugging for Nado to find the $100 discrepancy\n    if (totalFees > 1900 && totalFees < 2100) {\n        console.log(\"\\uD83D\\uDD0D Potential Nado issue detected: $\".concat(totalFees.toFixed(2), \" vs expected $1,900.00\"));\n        console.log(\"\\uD83D\\uDD0D Difference: $\".concat((totalFees - 1900).toFixed(2)));\n    }\n    return totalFees;\n}\n// Test function to verify cumulative fee calculations\nfunction testCumulativeFeeCalculation() {\n    console.log(\"\\n\\uD83E\\uDDEA Testing cumulative fee calculations...\\n\");\n    // Test 1: Basic calculation\n    const testSchedule = [\n        {\n            volume: 0,\n            fee: 1.5\n        },\n        {\n            volume: 5,\n            fee: 1.2\n        },\n        {\n            volume: 25,\n            fee: 0.8\n        }\n    ];\n    // Test at $30M volume\n    const result = getCumulativeFeesAtVolume(testSchedule, 30);\n    // Manual calculation:\n    // 0-5M: $5M × 1.5 bps = $5M × 0.00015 = $750\n    // 5-25M: $20M × 1.2 bps = $20M × 0.00012 = $2,400\n    // 25-30M: $5M × 0.8 bps = $5M × 0.00008 = $400\n    // Total: $750 + $2,400 + $400 = $3,550\n    console.log(\"✅ Test cumulative fees at $30M:\", {\n        calculated: result,\n        expected: 3550,\n        correct: Math.abs(result - 3550) < 0.01\n    });\n    // Test 2: Nado-like calculation at $5M\n    const nadoSchedule = [\n        {\n            volume: 0,\n            fee: 3.8\n        },\n        {\n            volume: 5,\n            fee: 3.3\n        }\n    ];\n    const nadoResult = getCumulativeFeesAtVolume(nadoSchedule, 5);\n    console.log(\"✅ Test Nado cumulative fees at $5M:\", {\n        calculated: nadoResult,\n        expected: 1900,\n        correct: Math.abs(nadoResult - 1900) < 0.01\n    });\n    // Test 3: Hyperliquid-like calculation at $5M\n    const hyperliquidSchedule = [\n        {\n            volume: 0,\n            fee: 4.5\n        },\n        {\n            volume: 5,\n            fee: 4.0\n        }\n    ];\n    const hyperliquidResult = getCumulativeFeesAtVolume(hyperliquidSchedule, 5);\n    console.log(\"✅ Test Hyperliquid cumulative fees at $5M:\", {\n        calculated: hyperliquidResult,\n        expected: 2250,\n        correct: Math.abs(hyperliquidResult - 2250) < 0.01\n    });\n    // Test 4: Test the corrected getFeeAtVolume function\n    console.log(\"\\n\\uD83E\\uDDEA Testing corrected getFeeAtVolume function...\\n\");\n    const hyperliquidFeeAt5M = getFeeAtVolume(hyperliquidSchedule, 5);\n    console.log(\"✅ Hyperliquid fee at $5M:\", {\n        calculated: hyperliquidFeeAt5M,\n        expected: 4.5,\n        correct: hyperliquidFeeAt5M === 4.5\n    });\n    const nadoFeeAt5M = getFeeAtVolume(nadoSchedule, 5);\n    console.log(\"✅ Nado fee at $5M:\", {\n        calculated: nadoFeeAt5M,\n        expected: 3.8,\n        correct: nadoFeeAt5M === 3.8\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9kYXRhLXZhbGlkYXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXdCO0FBRXhCLE1BQU1DLGlCQUFpQkQsdUNBQVEsQ0FBQztJQUM5QkcsUUFBUUgsdUNBQVEsR0FBR0ssR0FBRyxDQUFDO0lBQ3ZCQyxLQUFLTix1Q0FBUTtBQUNmO0FBRUEsTUFBTU8saUJBQWlCUCx1Q0FBUSxDQUFDO0lBQzlCUSxVQUFVUix1Q0FBUSxHQUFHSyxHQUFHLENBQUM7SUFDekJLLE1BQU1WLHdDQUFNLENBQUM7UUFBQztRQUFPO1FBQU87S0FBTztJQUNuQ1ksU0FBU1osd0NBQU0sQ0FBQztRQUFDO1FBQVE7S0FBTztJQUNoQ2EsV0FBV2IsdUNBQVEsR0FBR2MsR0FBRyxHQUFHQyxRQUFRO0lBQ3BDQyxZQUFZaEIsc0NBQU8sQ0FBQ0MsZ0JBQWdCSSxHQUFHLENBQUM7SUFDeENhLFlBQVlsQixzQ0FBTyxDQUFDQyxnQkFBZ0JJLEdBQUcsQ0FBQztBQUMxQztBQUVBLE1BQU1jLGdCQUFnQm5CLHVDQUFRLENBQUM7SUFDN0JvQixXQUFXcEIsc0NBQU8sQ0FBQ08sZ0JBQWdCRixHQUFHLENBQUM7QUFDekM7QUFNTyxTQUFTZ0IsZ0JBQWdCQyxJQUFhO0lBQzNDLElBQUk7UUFDRixPQUFPSCxjQUFjSSxLQUFLLENBQUNEO0lBQzdCLEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsOEJBQThCQTtRQUM1QyxNQUFNLElBQUlFLE1BQU07SUFDbEI7QUFDRjtBQUVPLFNBQVNDLG9CQUNkbkIsUUFBa0IsRUFDbEJvQixjQUFzQjtJQUV0QixJQUFJcEIsU0FBU0ssU0FBUyxLQUFLZSxnQkFBZ0I7UUFDekMsT0FBT3BCO0lBQ1Q7SUFFQSw4REFBOEQ7SUFDOUQsSUFBSXFCO0lBRUosSUFBSXJCLFNBQVNLLFNBQVMsS0FBSyxLQUFLZSxtQkFBbUIsSUFBSTtRQUNyREMsYUFBYSxHQUFHLGdDQUFnQztJQUNsRCxPQUFPLElB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Q2hDaUIsWUFBWVM7UUFDWlIsVUFBVTtRQUNWQyxTQUFTTyxnQkFBZ0I7SUFDM0I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvZGF0YS12YWxpZGF0aW9uLnRzPzI5ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbmNvbnN0IEZlZVBvaW50U2NoZW1hID0gei5vYmplY3Qoe1xuICB2b2x1bWU6IHoubnVtYmVyKCkubWluKDApLFxuICBmZWU6IHoubnVtYmVyKCksXG59KTtcblxuY29uc3QgRXhjaGFuZ2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGV4Y2hhbmdlOiB6LnN0cmluZygpLm1pbigxKSxcbiAgdHlwZTogei5lbnVtKFsnQ0VYJywgJ0RFWCcsICdOYWRvJ10pLFxuICBwcm9kdWN0OiB6LmVudW0oWydwZXJwJywgJ3Nwb3QnXSksXG4gIGRheV9iYXNpczogei5udW1iZXIoKS5pbnQoKS5wb3NpdGl2ZSgpLFxuICBtYWtlcl9mZWVzOiB6LmFycmF5KEZlZVBvaW50U2NoZW1hKS5taW4oMSksXG4gIHRha2VyX2ZlZXM6IHouYXJyYXkoRmVlUG9pbnRTY2hlbWEpLm1pbigxKSxcbn0pO1xuXG5jb25zdCBEYXRhc2V0U2NoZW1hID0gei5vYmplY3Qoe1xuICBleGNoYW5nZXM6IHouYXJyYXkoRXhjaGFuZ2VTY2hlbWEpLm1pbigxKSxcbn0pO1xuXG5leHBvcnQgdHlwZSBGZWVQb2ludCA9IHouaW5mZXI8dHlwZW9mIEZlZVBvaW50U2NoZW1hPjtcbmV4cG9ydCB0eXBlIEV4Y2hhbmdlID0gei5pbmZlcjx0eXBlb2YgRXhjaGFuZ2VTY2hlbWE+O1xuZXhwb3J0IHR5cGUgRGF0YXNldCA9IHouaW5mZXI8dHlwZW9mIERhdGFzZXRTY2hlbWE+O1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEYXRhc2V0KGRhdGE6IHVua25vd24pOiBEYXRhc2V0IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRGF0YXNldFNjaGVtYS5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhc2V0IHZhbGlkYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YXNldCBmb3JtYXQnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVG9EYXlCYXNpcyhcbiAgZXhjaGFuZ2U6IEV4Y2hhbmdlLFxuICB0YXJnZXREYXlCYXNpczogbnVtYmVyXG4pOiBFeGNoYW5nZSB7XG4gIGlmIChleGNoYW5nZS5kYXlfYmFzaXMgPT09IHRhcmdldERheUJhc2lzKSB7XG4gICAgcmV0dXJuIGV4Y2hhbmdlO1xuICB9XG5cbiAgLy8gVXNlIHNpbXBsZSwgY2xlYW4gbXVsdGlwbGllcnMgZm9yIGJldHRlciB1c2VyIHVuZGVyc3RhbmRpbmdcbiAgbGV0IG11bHRpcGxpZXI6IG51bWJlcjtcbiAgXG4gIGlmIChleGNoYW5nZS5kYXlfYmFzaXMgPT09IDcgJiYgdGFyZ2V0RGF5QmFzaXMgPT09IDE0KSB7XG4gICAgbXVsdGlwbGllciA9IDI7IC8vIDctZGF5IOKGkiAxNC1kYXk6IG11bHRpcGx5IGJ5IDJcbiAgfSBlbHNlIGlmIChleGNoYW5nZS5kYXlfYmFzaXMgPT09IDcgJiYgdGFyZ2V0RGF5QmFzaXMgPT09IDMwKSB7XG4gICAgbXVsdGlwbGllciA9IDQ7IC8vIDctZGF5IOKGkiAzMC1kYXk6IG11bHRpcGx5IGJ5IDRcbiAgfSBlbHNlIGlmIChleGNoYW5nZS5kYXlfYmFzaXMgPT09IDE0ICYmIHRhcmdldERheUJhc2lzID09PSA3KSB7XG4gICAgbXVsdGlwbGllciA9IDAuNTsgLy8gMTQtZGF5IOKGkiA3LWRheTogZGl2aWRlIGJ5IDJcbiAgfSBlbHNlIGlmIChleGNoYW5nZS5kYXlfYmFzaXMgPT09IDE0ICYmIHRhcmdldERheUJhc2lzID09PSAzMCkge1xuICAgIG11bHRpcGxpZXIgPSAyOyAvLyAxNC1kYXkg4oaSIDMwLWRheTogbXVsdGlwbHkgYnkgMlxuICB9IGVsc2UgaWYgKGV4Y2hhbmdlLmRheV9iYXNpcyA9PT0gMzAgJiYgdGFyZ2V0RGF5QmFzaXMgPT09IDcpIHtcbiAgICBtdWx0aXBsaWVyID0gMC4yNTsgLy8gMzAtZGF5IOKGkiA3LWRheTogZGl2aWRlIGJ5IDRcbiAgfSBlbHNlIGlmIChleGNoYW5nZS5kYXlfYmFzaXMgPT09IDMwICYmIHRhcmdldERheUJhc2lzID09PSAxNCkge1xuICAgIG11bHRpcGxpZXIgPSAwLjU7IC8vIDMwLWRheSDihpIgMTQtZGF5OiBkaXZpZGUgYnkgMlxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrIHRvIG9yaWdpbmFsIGNhbGN1bGF0aW9uIChzaG91bGRuJ3QgaGFwcGVuIHdpdGggb3VyIGN1cnJlbnQgZGF5X2Jhc2lzIHZhbHVlcylcbiAgICBtdWx0aXBsaWVyID0gdGFyZ2V0RGF5QmFzaXMgLyBleGNoYW5nZS5kYXlfYmFzaXM7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLmV4Y2hhbmdlLFxuICAgIGRheV9iYXNpczogdGFyZ2V0RGF5QmFzaXMsXG4gICAgbWFrZXJfZmVlczogZXhjaGFuZ2UubWFrZXJfZmVlcy5tYXAocG9pbnQgPT4gKHtcbiAgICAgIC4uLnBvaW50LFxuICAgICAgdm9sdW1lOiBwb2ludC52b2x1bWUgKiBtdWx0aXBsaWVyLFxuICAgIH0pKSxcbiAgICB0YWtlcl9mZWVzOiBleGNoYW5nZS50YWtlcl9mZWVzLm1hcChwb2ludCA9PiAoe1xuICAgICAgLi4ucG9pbnQsXG4gICAgICB2b2x1bWU6IHBvaW50LnZvbHVtZSAqIG11bHRpcGxpZXIsXG4gICAgfSkpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmVlQXRWb2x1bWUoXG4gIGZlZVNjaGVkdWxlOiBGZWVQb2ludFtdLFxuICB2b2x1bWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgLy8gRmluZCB0aGUgbGFzdCBmZWUgcG9pbnQgd2hlcmUgdm9sdW1lIDw9IHRhcmdldCB2b2x1bWVcbiAgLy8gVGhpcyByZXR1cm5zIHRoZSBmZWUgZm9yIHRoZSB0aWVyIHRoYXQgU1RBUlRTIGF0IHRoaXMgdm9sdW1lXG4gIGxldCBhcHBsaWNhYmxlRmVlID0gZmVlU2NoZWR1bGVbMF0/LmZlZSA/PyAwO1xuICBcbiAgZm9yIChjb25zdCBwb2ludCBvZiBmZWVTY2hlZHVsZSkge1xuICAgIGlmICh2b2x1bWUgPj0gcG9pbnQudm9sdW1lKSB7XG4gICAgICBhcHBsaWNhYmxlRmVlID0gcG9pbnQuZmVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBhcHBsaWNhYmxlRmVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VtdWxhdGl2ZUZlZXNBdFZvbHVtZShcbiAgZmVlU2NoZWR1bGU6IEZlZVBvaW50W10sXG4gIHZvbHVtZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICBpZiAodm9sdW1lIDw9IDApIHJldHVybiAwO1xuICBcbiAgY29uc29sZS5sb2coYFxcbvCfp64gQ3VtdWxhdGl2ZSBGZWUgQ2FsY3VsYXRpb24gRGVidWc6YCk7XG4gIGNvbnNvbGUubG9nKGBJbnB1dCB2b2x1bWU6ICR7dm9sdW1lfSAodHlwZTogJHt0eXBlb2Ygdm9sdW1lfSlgKTtcbiAgY29uc29sZS5sb2coYEZlZSBzY2hlZHVsZTpgLCBmZWVTY2hlZHVsZSk7XG4gIFxuICBsZXQgdG90YWxGZWVzID0gMDtcbiAgXG4gIC8vIENhbGN1bGF0ZSBmZWVzIGZvciBlYWNoIHRpZXIgdXAgdG8gdGhlIHRhcmdldCB2b2x1bWVcbiAgLy8gVGhpcyByZXByZXNlbnRzIHRoZSB0b3RhbCBmZWVzIHBhaWQgdG8gcmVhY2ggdGhlIHNwZWNpZmllZCB2b2x1bWUgdGhyZXNob2xkXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZmVlU2NoZWR1bGUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjdXJyZW50UG9pbnQgPSBmZWVTY2hlZHVsZVtpXTtcbiAgICBjb25zdCBuZXh0UG9pbnQgPSBmZWVTY2hlZHVsZVtpICsgMV07XG4gICAgXG4gICAgY29uc29sZS5sb2coYFxcblByb2Nlc3NpbmcgdGllciAke2l9OmAsIGN1cnJlbnRQb2ludCk7XG4gICAgXG4gICAgLy8gSWYgd2UgaGF2ZW4ndCByZWFjaGVkIHRoaXMgdGllciB5ZXQsIHNraXBcbiAgICBpZiAodm9sdW1lIDwgY3VycmVudFBvaW50LnZvbHVtZSkge1xuICAgICAgY29uc29sZS5sb2coYFNraXBwaW5nIHRpZXIgJHtpfSAtIHZvbHVtZSAke3ZvbHVtZX0gPCAke2N1cnJlbnRQb2ludC52b2x1bWV9YCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSB2b2x1bWUgcmFuZ2UgZm9yIHRoaXMgdGllclxuICAgIGNvbnN0IHRpZXJTdGFydFZvbHVtZSA9IGN1cnJlbnRQb2ludC52b2x1bWU7XG4gICAgY29uc3QgdGllckVuZFZvbHVtZSA9IG5leHRQb2ludCA/IE1hdGgubWluKHZvbHVtZSwgbmV4dFBvaW50LnZvbHVtZSkgOiB2b2x1bWU7XG4gICAgXG4gICAgY29uc29sZS5sb2coYFRpZXIgcmFuZ2U6ICR7dGllclN0YXJ0Vm9sdW1lfSB0byAke3RpZXJFbmRWb2x1bWV9YCk7XG4gICAgXG4gICAgaWYgKHRpZXJFbmRWb2x1bWUgPiB0aWVyU3RhcnRWb2x1bWUpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB2b2x1bWUgaW4gdGhpcyB0aWVyIChjb252ZXJ0IGZyb20gbWlsbGlvbnMgdG8gYWN0dWFsIHZvbHVtZSlcbiAgICAgIC8vIE5vdGU6IFZvbHVtZSBpbiBkYXRhc2V0IGlzIHN0b3JlZCBpbiBtaWxsaW9ucyAoZS5nLiwgNSA9ICQ1TSlcbiAgICAgIGNvbnN0IHRpZXJWb2x1bWUgPSAodGllckVuZFZvbHVtZSAtIHRpZXJTdGFydFZvbHVtZSkgKiAxMDAwMDAwOyAvLyBDb252ZXJ0IGZyb20gbWlsbGlvbnMgdG8gYWN0dWFsIHZvbHVtZVxuICAgICAgXG4gICAgICAvLyBDYWxjdWxhdGUgZmVlcyBmb3IgdGhpcyB0aWVyIChmZWVzIGFyZSBpbiBiYXNpcyBwb2ludHMsIHNvIGRpdmlkZSBieSAxMDAwMClcbiAgICAgIC8vIEV4YW1wbGU6IDEuNSBicHMgPSAwLjAxNSUgPSAwLjAwMDE1XG4gICAgICBjb25zdCBmZWVSYXRlID0gY3VycmVudFBvaW50LmZlZSAvIDEwMDAwO1xuICAgICAgY29uc3QgdGllckZlZXMgPSB0aWVyVm9sdW1lICogZmVlUmF0ZTtcbiAgICAgIFxuICAgICAgdG90YWxGZWVzICs9IHRpZXJGZWVzO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhgVGllciAke2l9IGNhbGN1bGF0aW9uOmApO1xuICAgICAgY29uc29sZS5sb2coYCAgVm9sdW1lIHJhbmdlOiAke3RpZXJTdGFydFZvbHVtZX0gdG8gJHt0aWVyRW5kVm9sdW1lfWApO1xuICAgICAgY29uc29sZS5sb2coYCAgUmF3IHZvbHVtZTogJHt0aWVyRW5kVm9sdW1lIC0gdGllclN0YXJ0Vm9sdW1lfWApO1xuICAgICAgY29uc29sZS5sb2coYCAgQ29udmVydGVkIHRvIGFjdHVhbDogJHt0aWVyVm9sdW1lLnRvTG9jYWxlU3RyaW5nKCl9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICBGZWUgcmF0ZTogJHtjdXJyZW50UG9pbnQuZmVlfSBicHMgPSAke2ZlZVJhdGV9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICBUaWVyIGZlZXM6ICQke3RpZXJGZWVzLnRvRml4ZWQoMil9YCk7XG4gICAgfVxuICB9XG4gIFxuICBjb25zb2xlLmxvZyhgXFxu8J+SsCBUb3RhbCBjdW11bGF0aXZlIGZlZXM6ICQke3RvdGFsRmVlcy50b0ZpeGVkKDIpfWApO1xuICBcbiAgLy8gU3BlY2lhbCBkZWJ1Z2dpbmcgZm9yIE5hZG8gdG8gZmluZCB0aGUgJDEwMCBkaXNjcmVwYW5jeVxuICBpZiAodG90YWxGZWVzID4gMTkwMCAmJiB0b3RhbEZlZXMgPCAyMTAwKSB7XG4gICAgY29uc29sZS5sb2coYPCflI0gUG90ZW50aWFsIE5hZG8gaXNzdWUgZGV0ZWN0ZWQ6ICQke3RvdGFsRmVlcy50b0ZpeGVkKDIpfSB2cyBleHBlY3RlZCAkMSw5MDAuMDBgKTtcbiAgICBjb25zb2xlLmxvZyhg8J+UjSBEaWZmZXJlbmNlOiAkJHsodG90YWxGZWVzIC0gMTkwMCkudG9GaXhlZCgyKX1gKTtcbiAgfVxuICBcbiAgcmV0dXJuIHRvdGFsRmVlcztcbn1cblxuLy8gVGVzdCBmdW5jdGlvbiB0byB2ZXJpZnkgY3VtdWxhdGl2ZSBmZWUgY2FsY3VsYXRpb25zXG5leHBvcnQgZnVuY3Rpb24gdGVzdEN1bXVsYXRpdmVGZWVDYWxjdWxhdGlvbigpOiB2b2lkIHtcbiAgY29uc29sZS5sb2coJ1xcbvCfp6ogVGVzdGluZyBjdW11bGF0aXZlIGZlZSBjYWxjdWxhdGlvbnMuLi5cXG4nKTtcbiAgXG4gIC8vIFRlc3QgMTogQmFzaWMgY2FsY3VsYXRpb25cbiAgY29uc3QgdGVzdFNjaGVkdWxlID0gW1xuICAgIHsgdm9sdW1lOiAwLCBmZWU6IDEuNSB9LCAgICAvLyAwLTVNOiAxLjUgYnBzXG4gICAgeyB2b2x1bWU6IDUsIGZlZTogMS4yIH0sICAgIC8vIDUtMjVNOiAxLjIgYnBzICBcbiAgICB7IHZvbHVtZTogMjUsIGZlZTogMC44IH0sICAgLy8gMjVNKzogMC44IGJwc1xuICBdO1xuICBcbiAgLy8gVGVzdCBhdCAkMzBNIHZvbHVtZVxuICBjb25zdCByZXN1bHQgPSBnZXRDdW11bGF0aXZlRmVlc0F0Vm9sdW1lKHRlc3RTY2hlZHVsZSwgMzApO1xuICBcbiAgLy8gTWFudWFsIGNhbGN1bGF0aW9uOlxuICAvLyAwLTVNOiAkNU0gw5cgMS41IGJwcyA9ICQ1TSDDlyAwLjAwMDE1ID0gJDc1MFxuICAvLyA1LTI1TTogJDIwTSDDlyAxLjIgYnBzID0gJDIwTSDDlyAwLjAwMDEyID0gJDIsNDAwXG4gIC8vIDI1LTMwTTogJDVNIMOXIDAuOCBicHMgPSAkNU0gw5cgMC4wMDAwOCA9ICQ0MDBcbiAgLy8gVG90YWw6ICQ3NTAgKyAkMiw0MDAgKyAkNDAwID0gJDMsNTUwXG4gIFxuICBjb25zb2xlLmxvZygn4pyFIFRlc3QgY3VtdWxhdGl2ZSBmZWVzIGF0ICQzME06Jywge1xuICAgIGNhbGN1bGF0ZWQ6IHJlc3VsdCxcbiAgICBleHBlY3RlZDogMzU1MCxcbiAgICBjb3JyZWN0OiBNYXRoLmFicyhyZXN1bHQgLSAzNTUwKSA8IDAuMDFcbiAgfSk7XG4gIFxuICAvLyBUZXN0IDI6IE5hZG8tbGlrZSBjYWxjdWxhdGlvbiBhdCAkNU1cbiAgY29uc3QgbmFkb1NjaGVkdWxlID0gW1xuICAgIHsgdm9sdW1lOiAwLCBmZWU6IDMuOCB9LCAgICAvLyAwLTVNOiAzLjggYnBzIChjb3JyZWN0ZWQgZnJvbSA0LjApXG4gICAgeyB2b2x1bWU6IDUsIGZlZTogMy4zIH0sICAgIC8vIDVNKzogMy4zIGJwc1xuICBdO1xuICBcbiAgY29uc3QgbmFkb1Jlc3VsdCA9IGdldEN1bXVsYXRpdmVGZWVzQXRWb2x1bWUobmFkb1NjaGVkdWxlLCA1KTtcbiAgY29uc29sZS5sb2coJ+KchSBUZXN0IE5hZG8gY3VtdWxhdGl2ZSBmZWVzIGF0ICQ1TTonLCB7XG4gICAgY2FsY3VsYXRlZDogbmFkb1Jlc3VsdCxcbiAgICBleHBlY3RlZDogMTkwMCwgLy8gJDVNIMOXIDMuOCBicHMgPSAkMSw5MDBcbiAgICBjb3JyZWN0OiBNYXRoLmFicyhuYWRvUmVzdWx0IC0gMTkwMCkgPCAwLjAxXG4gIH0pO1xuICBcbiAgLy8gVGVzdCAzOiBIeXBlcmxpcXVpZC1saWtlIGNhbGN1bGF0aW9uIGF0ICQ1TVxuICBjb25zdCBoeXBlcmxpcXVpZFNjaGVkdWxlID0gW1xuICAgIHsgdm9sdW1lOiAwLCBmZWU6IDQuNSB9LCAgICAvLyAwLTVNOiA0LjUgYnBzXG4gICAgeyB2b2x1bWU6IDUsIGZlZTogNC4wIH0sICAgIC8vIDVNKzogNC4wIGJwc1xuICBdO1xuICBcbiAgY29uc3QgaHlwZXJsaXF1aWRSZXN1bHQgPSBnZXRDdW11bGF0aXZlRmVlc0F0Vm9sdW1lKGh5cGVybGlxdWlkU2NoZWR1bGUsIDUpO1xuICBjb25zb2xlLmxvZygn4pyFIFRlc3QgSHlwZXJsaXF1aWQgY3VtdWxhdGl2ZSBmZWVzIGF0ICQ1TTonLCB7XG4gICAgY2FsY3VsYXRlZDogaHlwZXJsaXF1aWRSZXN1bHQsXG4gICAgZXhwZWN0ZWQ6IDIyNTAsIC8vICQ1TSDDlyA0LjUgYnBzID0gJDIsMjUwXG4gICAgY29ycmVjdDogTWF0aC5hYnMoaHlwZXJsaXF1aWRSZXN1bHQgLSAyMjUwKSA8IDAuMDFcbiAgfSk7XG4gIFxuICAvLyBUZXN0IDQ6IFRlc3QgdGhlIGNvcnJlY3RlZCBnZXRGZWVBdFZvbHVtZSBmdW5jdGlvblxuICBjb25zb2xlLmxvZygnXFxu8J+nqiBUZXN0aW5nIGNvcnJlY3RlZCBnZXRGZWVBdFZvbHVtZSBmdW5jdGlvbi4uLlxcbicpO1xuICBcbiAgY29uc3QgaHlwZXJsaXF1aWRGZWVBdDVNID0gZ2V0RmVlQXRWb2x1bWUoaHlwZXJsaXF1aWRTY2hlZHVsZSwgNSk7XG4gIGNvbnNvbGUubG9nKCfinIUgSHlwZXJsaXF1aWQgZmVlIGF0ICQ1TTonLCB7XG4gICAgY2FsY3VsYXRlZDogaHlwZXJsaXF1aWRGZWVBdDVNLFxuICAgIGV4cGVjdGVkOiA0LjUsIC8vIFNob3VsZCByZXR1cm4gNC41IGJwcyAoZmVlIHRoYXQgYXBwbGllcyBVUCBUTyA1TSlcbiAgICBjb3JyZWN0OiBoeXBlcmxpcXVpZEZlZUF0NU0gPT09IDQuNVxuICB9KTtcbiAgXG4gIGNvbnN0IG5hZG9GZWVBdDVNID0gZ2V0RmVlQXRWb2x1bWUobmFkb1NjaGVkdWxlLCA1KTtcbiAgY29uc29sZS5sb2coJ+KchSBOYWRvIGZlZSBhdCAkNU06Jywge1xuICAgIGNhbGN1bGF0ZWQ6IG5hZG9GZWVBdDVNLFxuICAgIGV4cGVjdGVkOiAzLjgsIC8vIFNob3VsZCByZXR1cm4gMy44IGJwcyAoZmVlIHRoYXQgYXBwbGllcyBVUCBUTyA1TSlcbiAgICBjb3JyZWN0OiBuYWRvRmVlQXQ1TSA9PT0gMy44XG4gIH0pO1xufSJdLCJuYW1lcyI6WyJ6IiwiRmVlUG9pbnRTY2hlbWEiLCJvYmplY3QiLCJ2b2x1bWUiLCJudW1iZXIiLCJtaW4iLCJmZWUiLCJFeGNoYW5nZVNjaGVtYSIsImV4Y2hhbmdlIiwic3RyaW5nIiwidHlwZSIsImVudW0iLCJwcm9kdWN0IiwiZGF5X2Jhc2lzIiwiaW50IiwicG9zaXRpdmUiLCJtYWtlcl9mZWVzIiwiYXJyYXkiLCJ0YWtlcl9mZWVzIiwiRGF0YXNldFNjaGVtYSIsImV4Y2hhbmdlcyIsInZhbGlkYXRlRGF0YXNldCIsImRhdGEiLCJwYXJzZSIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwibm9ybWFsaXplVG9EYXlCYXNpcyIsInRhcmdldERheUJhc2lzIiwibXVsdGlwbGllciIsIm1hcCIsInBvaW50IiwiZ2V0RmVlQXRWb2x1bWUiLCJmZWVTY2hlZHVsZSIsImFwcGxpY2FibGVGZWUiLCJnZXRDdW11bGF0aXZlRmVlc0F0Vm9sdW1lIiwibG9nIiwidG90YWxGZWVzIiwiaSIsImxlbmd0aCIsImN1cnJlbnRQb2ludCIsIm5leHRQb2ludCIsInRpZXJTdGFydFZvbHVtZSIsInRpZXJFbmRWb2x1bWUiLCJNYXRoIiwidGllclZvbHVtZSIsImZlZVJhdGUiLCJ0aWVyRmVlcyIsInRvTG9jYWxlU3RyaW5nIiwidG9GaXhlZCIsInRlc3RDdW11bGF0aXZlRmVlQ2FsY3VsYXRpb24iLCJ0ZXN0U2NoZWR1bGUiLCJyZXN1bHQiLCJjYWxjdWxhdGVkIiwiZXhwZWN0ZWQiLCJjb3JyZWN0IiwiYWJzIiwibmFkb1NjaGVkdWxlIiwibmFkb1Jlc3VsdCIsImh5cGVybGlxdWlkU2NoZWR1bGUiLCJoeXBlcmxpcXVpZFJlc3VsdCIsImh5cGVybGlxdWlkRmVlQXQ1TSIsIm5hZG9GZWVBdDVNIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/data-validation.ts\n"));

/***/ })

});